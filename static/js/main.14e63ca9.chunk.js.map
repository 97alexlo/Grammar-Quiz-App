{"version":3,"sources":["data.js","views/Level1.js","App.js","serviceWorker.js","index.js"],"names":["level1","Level1","state","value","timeOut","round","timer","randomTense","wrongAnswer","wrongAnswers","startTimeOut","timeout","setTimeout","setState","interval","setInterval","a","TenseArray","Math","floor","random","length","handleRestart","handleChange","event","target","handleSubmit","preventDefault","alert","trim","checkMatched","simple","past","clearTimeout","concat","vocab","handleRedirect","window","location","reload","handleAudio","element","audio","document","getElementById","src","getAttribute","load","play","this","clearInterval","style","padding","border","borderRadius","maxWidth","margin","percent","status","display","justifyContent","color","fontSize","onClick","data-value","mp3","AudioOutlined","id","controls","onSubmit","name","onChange","type","className","Fragment","map","answer","index","key","Component","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.14e63ca9.chunk.js","sourcesContent":["const level1 = [\n    {\n        \"id\": \"1\",\n        \"vocab\": \"burn\",\n        \"simple\": \"burned\",\n        \"past\": \"burnt\",\n        \"mp3\": \"https://www.macmillandictionary.com/media/british/uk_pron/b/bur/burn_/burn_British_English_pronunciation_72454.mp3\"\n    },\n    {\n        \"id\": \"2\",\n        \"vocab\": \"arise\",\n        \"simple\": \"arose\",\n        \"past\": \"arisen\",\n        \"mp3\": \"https://www.macmillandictionary.com/media/british/uk_pron/a/ari/arise/arise_British_English_pronunciation_65838.mp3\"\n    },\n    {\n        \"id\": \"3\",\n        \"vocab\": \"be\",\n        \"simple\": \"was\",\n        \"past\": \"been\",\n        \"mp3\": \"https://www.macmillandictionary.com/media/british/uk_pron/b/be_/be_Br/be_British_English_pronunciation.mp3\"\n    },\n    {\n        \"id\": \"4\",\n        \"vocab\": \"bind\",\n        \"simple\": \"bound\",\n        \"past\": \"bound\",\n        \"mp3\": \"https://www.macmillandictionary.com/media/british/uk_pron/b/bin/bind_/bind_British_English_pronunciation_70999.mp3\"\n    },\n    {\n        \"id\": \"5\",\n        \"vocab\": \"build\",\n        \"simple\": \"built\",\n        \"past\": \"built\",\n        \"mp3\": \"https://www.macmillandictionary.com/media/british/uk_pron/b/bui/build/build_British_English_pronunciation_72305.mp3\"\n    }\n]\n\nexport {\n    level1\n}","import React, { Component } from 'react';\nimport { Input, Button, Progress, Divider } from \"antd\";\nimport { level1 } from '../data';\nimport { Link } from 'react-router-dom';\nimport { AudioOutlined } from '@ant-design/icons';\n\nclass Level1 extends Component {\n\n    state = {\n        value: \"\",\n        timeOut: false,\n        round: 0,\n        timer: 10,\n        randomTense: \"\",\n        wrongAnswer: \"\",\n        wrongAnswers: []\n    }\n\n    componentDidMount() {\n        this.randomTense()\n        this.startTimeOut()\n    }\n\n    startTimeOut = () => {\n        this.timeout = setTimeout(() => {\n            this.setState({ timeOut: true })\n        }, 10000)\n\n        this.interval = setInterval(( ) => {\n            this.setState({ timer: this.state.timer - 1 })\n        }, 1000)\n    }\n\n    componentDidUpdate() {\n        //stop countdown when it is 0 \n        if(this.state.timer === 0) {\n            clearInterval(this.interval)\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timeout)\n        clearInterval(this.interval)\n    }\n\n    // get a random tense: simple or past\n    randomTense = async() => {\n        let TenseArray = ['simple', 'past']\n\n        let randomTense = await TenseArray[Math.floor(Math.random() * TenseArray.length)]\n        this.setState({ randomTense: randomTense})\n    }\n\n    // restart button\n    handleRestart = () => {\n        //reset timer and timeout to false\n        this.setState({ timer: 10, timeOut: false, wrongAnswer: \"\" })\n\n        // start the timer again\n        this.startTimeOut();\n    }\n\n    handleChange = (event) => {\n        this.setState({ value: event.target.value })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        // can not submit if the timer is 0\n        if(this.state.timeOut) {\n            return alert(\"Please click on Restart to try again\")\n        }\n\n        // can not submit if there it is blank\n        if(!this.state.value.trim()) {\n            return alert(\"Please type your answer first!\")\n        }\n\n        this.setState({ value: \"\", wrongAnswer: \"\" })\n\n        //check if the answer is correct or not\n        this.checkMatched()\n    }\n\n    checkMatched = () => {\n        //check if the verb in simple or past matches the answer entered by user\n        (this.state.randomTense === 'simple' ? level1[this.state.round].simple : level1[this.state.round].past)\n            === this.state.value ? \n            //true\n        this.setState({ round: this.state.round + 1, timer: 10, wrongAnswer: \"\"}, () => {\n            this.randomTense()\n            //stop the setTimeOut and start new setTimeout\n            clearTimeout(this.timeout);\n            this.timeout = setTimeout(() => {\n                this.setState({ timeOut: true })\n            }, 10000)\n        })\n        :\n        //false\n        this.setState({ \n            wrongAnswer: this.state.randomTense === 'simple' ? `${level1[this.state.round].simple}` \n            : `${level1[this.state.round].past}`}, () => {\n            this.setState({ \n                round: this.state.round + 1, timer: 10, \n                wrongAnswers: this.state.wrongAnswers.concat(level1[this.state.round].vocab)\n            })\n            //get a random tense for the next question\n            this.randomTense()\n            clearTimeout(this.timeout);\n            this.timeout = setTimeout(() => {\n                this.setState({ timeOut: true })\n            }, 10000)\n        })\n    }\n\n    // try again button to restart the quiz\n    handleRedirect = () => {\n        setTimeout(() => {\n            window.location.reload();\n        }, 10);\n    }\n\n    handleAudio = (event) => {\n        event.preventDefault();\n        var element = event.target;\n        var audio = document.getElementById('audio');\n        var source = document.getElementById('audioSource');\n        source.src = element.getAttribute('data-value');\n        audio.load(); // preload audio without playing\n        audio.play();\n    }\n    render() {\n        return (\n            <div style={{ padding: '.5rem 1rem 1rem', border: '1px solid grey', borderRadius: '6px', maxWidth: 400, margin: '5rem auto' }}>\n                {this.state.round < level1.length ? \n                <>\n                    <h1>Grammar Quiz</h1>\n\n                    <Progress percent={this.state.round / level1.length * 100} status=\"active\"/>\n\n                    <div style={{ display:'flex', justifyContent:'space-between'}}>\n                        <h2>LEVEL 1</h2>\n                        <h2>{this.state.round}/{level1.length}</h2>\n                    </div>\n\n                    <span style={{ color: 'grey'}}>Infinitive</span>\n                    {/* <h2>{level1[this.state.round].vocab}</h2> */}\n                    <div style={{ fontSize: '1.4rem', display: 'flex', justifyContent: 'flex-start' }}>\n                            <li style={{ display: \"block\"}}>\n                                <p\n                                    onClick={this.handleAudio}\n                                    //use previous rounds audio \n                                    data-value={level1[this.state.round].mp3}>\n                                <AudioOutlined /> {level1[this.state.round].vocab}\n                                </p>\n                            </li>\n                            <audio id=\"audio\" controls style={{display: 'none'}}>\n                                <source id=\"audioSource\"></source>\n                                Your browser does not support the audio format\n                            </audio>\n                        </div>\n\n                    <div style={{ fontSize: '1rem' }}>\n                        What is the <span style={{ color: 'red'}}>\n                            {this.state.randomTense === 'simple' ? 'simple past ' : 'past participle '}\n                            </span>\n                            of {level1[this.state.round].vocab} ?\n                    </div>\n\n                    <form style={{ padding: '1rem 0'}} onSubmit={this.handleSubmit}>\n                        <div style={{ display: 'flex' }}>\n                            <Input\n                                name=\"value\"\n                                onChange={this.handleChange}\n                                value={this.state.value}\n                                id=\"vocab\"\n                                type=\"text\"\n                            />\n                            <Button \n                                className\n                                type=\"submit\"\n                                onClick={this.handleSubmit}\n                            >\n                                Submit\n                            </Button>\n                        </div>\n                    </form>\n\n                    <span style={{ color: 'dark grey'}}>Countdown timer:</span>\n\n                    <div style={{ display: 'flex', justifyContent: 'space-between'}}>\n                        <Button className={`${this.state.timer <= 8 && 'disabled'}`}>5</Button>\n                        <Button className={`${this.state.timer <= 6 && 'disabled'}`}>4</Button>\n                        <Button className={`${this.state.timer <= 4 && 'disabled'}`}>3</Button>\n                        <Button className={`${this.state.timer <= 2 && 'disabled'}`}>2</Button>\n                        <Button className={`${this.state.timer <= 0 && 'disabled'}`}>1</Button>\n                        <Button \n                            onClick={this.handleRestart}\n                            // when timeout is true, display restart button\n                            // otherwise, don't display the button\n                            style={{display: this.state.timeOut ? 'block' : 'none'}}\n                            >\n                            Restart\n                        </Button>\n                    </div>\n\n                    {this.state.wrongAnswer && (\n                        <React.Fragment>\n                        <Divider/>\n                        <h3>Incorrect! Correct answer:</h3>\n                        <div style={{ fontSize: '2rem', display: 'flex', justifyContent: 'flex-start' }}>\n                            <li style={{ display: \"block\"}}>\n                                <p>\n                                {this.state.wrongAnswer}\n                                </p>\n                            </li>\n                            <audio id=\"audio\" controls style={{display: 'none'}}>\n                                <source id=\"audioSource\"></source>\n                                Your browser does not support the audio format\n                            </audio>\n                        </div>\n                        </React.Fragment>\n                    )}\n                </>\n                :\n                <>\n                    <h2> Review your incorrect answers</h2>\n                    {this.state.wrongAnswers.map((answer, index) => (\n                    <div key={index}>\n                        <ul>\n                            <li>\n                                {answer}\n                            </li>\n                        </ul>\n                    </div>\n                    ))}\n                    \n                    <div style={{ display: 'flex', justifyContent: 'center'}}>\n                        <Button onClick={this.handleRedirect}>Try again!</Button>\n                        {/* <Button><Link to=\"/level2\">Next Level</Link></Button> */}\n                    </div>\n                </>\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default Level1;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Level1 from \"./views/Level1\";\nimport {HashRouter as Router} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Level1}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}